


// 📚 'net' 모듈을 사용하여 간단한 TCP 소켓 클라이언트를 생성

// 🔷 net 모듈 가져오기 
    const net = require('net')


// 🔷 서버에 연결할 때 사용할 포트 설정
    const config = { port : 8080 }
        // 포트의 내용을 설정해줄 객체를 담는다.


// 🔷 net.connect() 메서드를 사용하여 1) TCP 소켓을 생성하고, 2) 해당 포트로 ⭐연결을 시도⭐ 
    const socket = net.connect(config)
        // connect 메소드를 사용해서 
        // TCP 소켓을 만들고, 지정 포트로, 연결 시도

        // ['TCP 소켓'을 만든다는 건?]
            // 예시 
                // '소켓'은 컴퓨터 끼리, 이야기할 수 있게, 도와주는 도구 
                // 예를 들어, '핸드폰이 연결' 되면 > 친구들과 '문자 주고 받을 수 있음'
                // 소켓도 비슷한 역할을 함. > 소켓을 만들면, '컴퓨터끼리 연결' 되어, '데이터를 주고 받을 수' 있다. 


// 🔷 소켓이 성공적으로 연결되면(trigger), 1) connect 이벤트 발생 2) 해당 이벤트의 콜백함수 실행
    socket.on( 'connect', () => {
        console.log("연결이 잘 되었어요");
            // ⭐콘솔(터미널)⭐ 에서 "연결이 잘 되었어요" 라고 찍힐 것. 

        socket.write('데이터 전송');
            // 소켓을 통해, '데이터 전송' 메시지를, ⭐'서버' 에게⭐ 보낸다. 
    })
    // [해석]
        // net 모듈에서 ⭐'소켓이 성공적으로 연결되면, connect 이벤트를 발생시켜라' 라고 짜놓은 것⭐ 이고, 그걸 따라야 함. 
        // net 모듈이 소켓이 연결된 상황을 파악해서, connect 이벤트를 통해, connect 되었어~ 라고 알려주는 거야. 
        // 마치, ⭐'click 이벤트가 발생하면 > 스크롤 내려줘~' 와 같은 것


// 🔷 서버로 부터 데이터를 받으면(trigger) -> 1) data 이벤트 발생 2) 해당 이벤트의 콜백함수 실행
    socket.on("data", (data)=>{
        // TCP 소켓에서 데이터를 받으면 콜백 함수 실행
        console.log("받은 데이터 : ",data)
        socket.end();
        // end 메서드
        // TCP 연결을 종료
    })
    // [해석]
        // TCP 소켓에서, 데이터를 받으면, 'data 이벤트'가 발생함. 왜? 그렇게 짜놓았기 때문에.
        // 즉, 
            // 1) 소켓에서 데이터를 받으면 'data' 이벤트가 발생하고, 
            // 2) 해당 이벤트의 콜백 함수가 실행됩니다. 
            // 3) 이번 예제에서는 
                // a) 받은 데이터를 콘솔에 출력하고, 
                // b) socket.end() 메서드를 사용하여 TCP 연결을 종료합니다
        // 시사점 
            // 이렇게, 'data 이벤트' 를 활용하면, '서버로 부터 데이터를 받았을 때, 원하는 동작을 수행' 하게 할 수 있음.

