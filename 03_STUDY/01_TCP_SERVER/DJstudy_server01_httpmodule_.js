



// 🔷 '모듈' 중에서 이미 만들어 둔 'http 모듈' '가져오기'
    const http = require('http');
        // http 내장 모듈을 사용. 


// 🔷 가져온 모듈에서 > createServer 를 꺼내고 > 'createServer로 서버를 생성' 하고 > 'server 객체' 만들기 
    const server = http.createServer((req, res) => {
        // 지금 만든 서버로, '요청' 이 오면 > '지금 만든 함수'가 실행이 됨 (호출이 됨)
            res.write('<h1> Hello node </h1>');
            res.write('<p> Hello node </p>');
                // write 메소드는 그냥 쓰는 건가? 
            res.end("server on");   
                // 응답 end메소드 해당 내용을 응답한후 종료.
                // 그러면, end는 응답을 다 한다음에 써주는 건가? ❓❓❓❓❓ 
    })
        // [해석]
            // createServer 메소드는 서버 객체를 만들어준다. 
                // '서버' 라면, '블라블라' 가 필요할텐데, '요청' 을 받고, 처리하고, '응답' 하는 기능이 핵심 (내 생각)
            // '호출된 함수'는 클라이언트의 요청을 해결하고 > 클라이언트에 '응답' 을 전달한다.


// 🔷 PORT 번호(프로세스 번호) 부여
    const PORT = 8080;
        // '서버' 도 '프로그램' 임 
        // 노드가 서버를 실항하는 순간, '프로세스(PROCESS)' 에 올려야 함. 
        // 'process' 에 올리려면, 'PORT' 라는 것을 하나 잡아준다.
            // EX) 8080 PORT 에서, 프로세스로써 돌게 만들 것
            // EX) 8080번 프로세스~ 

        // 일반 웹사이트에서는 PORT 번호가 '숨겨져' 있음. 
        
        // 특정 PORT > 특정 프로그램을 가리킴
            // '334 PORT = MySQL' 을 가리킴  
            // 하나의 도메인을 구매해서, 다양한 프로그램을 사용하는 경우임

        // 3000번 포트 같은 포트를 지정하는 이유 
            // 네트워크 프로세스를 나눠 주기 위해서

        // 시스템 예약 포트이외의 사용하지 않을것 같은 포트들을 사용하면된다

        // localhost 를 벗어나려면, '배포' 를 해봐야 함. 


// 🔷 서버가, 8080 PORT 에서 LISTEN 하도록 지정 (거기서 듣고 있도록 만든다.)
    server.listen (PORT, () => {
        console.log(`서버는, ${PORT} 에서, 잘 듣고 있어요~`);
    })
        // listen 에 대한 콜백임
        // 8080번과 연결이 되면 > 콜백함수가 실행~

        // [이 순간의 의의]
            // '서버 객체'의 'listen 메소드'를 호출해서
            // 클라이언트의 요청에, '⭐대기하고 있는 상태(어떤 event, 어떤 요청이 발생하는지, 계속 listen)⭐' 로 만든다. 

            // 이벤트 루프를 돌면서 요청이 오기까지 대기를 하다가, 요청이오면 응답해준다.
            // listen메소드에 매개변수로 첫번째 매개변수로 port를 전달


// 🔷 실제로 서버를 실행시켜보기 
    // 1. 서버코드가 있는 파일 실행 시키기
        // 1) 터미널이 가리키는 경로 확인 
            // ex) cd C:\Users\user11\Desktop\kga\week01\230428\01_tcp_server_ 로 '⭐경로 이동⭐'
        // 2) 터미널에서 node 활용해서 서버 파일 실행 
            // ex) node server1.js 혹은 node server1 
        // 3) 정상작동 한다면, 아래와 같이 나옴 
            // C:\Users\user11\Desktop\kga\week01\230428\01_tcp_server_>node server1
            // 서버가 잘 열렸어요


// 🔷 프론트에서, '요청' 을 보내보기 
    // 1) 브라우저에서 `localhost:8080` 입력 하고 enter
    // 2) 이 순간! '서버' 에게 '요청(request)' 이 들어간다. 
    // 3) '서버' 는 해당 요청에 대해, 1) h1, p 태그를 write 하고 2) end메소를 실행해서 > '응답' 을 내보낸다.
    // 4) 그 결과, 브라우저에 'html이 렌더링 된 모습' 이 보인다. 



// 🔷 추가 공부할 것 
    // 항상 에러 처리 ⭐
        // 아직, 잘 이해 안 돼 😥
        // server.on ('listening' , () => {
        //     console.error(error);
        // });

// 🔷 주의사항 
    // 1. 코드를 수정하면 > 자동 반영 되는게 아님 
    // 2. 코드 수정 후 > 서버를 한번 꺼줬다가 > 다시 켜줘야 함